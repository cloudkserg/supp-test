<?php
/**
 * Created by PhpStorm.
 * User: dns
 * Date: 12.09.17
 * Time: 20:16
 */

namespace tests\unit\Listeners;


use App\Company;
use App\Demand\Response;
use App\Events\Demand\CancelDemandEvent;
use App\Mail\Demand\CancelDemandMail;
use App\Type\DemandStatus;
use App\Type\ResponseStatus;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Mail;

class CancelEventListenerTest extends \TestCase
{
    use DatabaseMigrations;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        factory(Company::class)->create();
        $this->createBeforeCompany();
        $this->createBeforeDemand();

    }


    public function testHandleMailDemandListenerZeroResponse()
    {
        $demand = $this->createDemandWithItems(1, [
            'status' => DemandStatus::CANCEL
        ]);

        $event = new CancelDemandEvent($demand);

        \Mail::fake();
        event($event);

        Mail::assertNotSent(CancelDemandEvent::class);
    }


    public function testHandleMailDemandListenerOneResponseActive()
    {
        $demand = $this->createDemandWithItems(1, [
            'status' => DemandStatus::CANCEL
        ]);
        $response = $this->createResponseWithItems(1, [
            'demand_id' => $demand->id,
            'status' => ResponseStatus::ACTIVE
        ]);

        $event = new CancelDemandEvent($demand);

        \Mail::fake();
        event($event);

        Mail::assertSent(CancelDemandMail::class, function (CancelDemandMail $mail) use ($demand, $response) {
                return $mail->hasTo($response->company->getAdmin()->email) and
                    $mail->item->id == $demand->id;
        });
    }

    public function testCancelResponseListener()
    {
        $demand = $this->createDemandWithItems(1, [
            'status' => DemandStatus::CANCEL
        ]);
        $response = $this->createResponseWithItems(1, [
            'demand_id' => $demand->id,
            'status' => ResponseStatus::ACTIVE
        ]);


        $event = new CancelDemandEvent($demand);

        \Mail::fake();
        event($event);

        $responseInBase = Response::find($response->id);
        $this->assertEquals(ResponseStatus::CANCEL, $responseInBase->status);

    }

}