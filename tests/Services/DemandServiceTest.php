<?php
/**
 * Created by PhpStorm.
 * User: kirya
 * Date: 16.09.16
 * Time: 9:10
 */

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;

class DemandServiceTest extends TestCase{

    use DatabaseMigrations;

    private $regions;

    private $spheres;

    private $quantities;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createBeforeCompany();
        $this->company = factory(\App\Company::class)->create();

        $this->regions = factory(\App\Type\Region::class, 3)->create()->pluck('id')->toArray();
        $this->spheres = factory(\App\Type\Sphere::class, 3)->create()->pluck('id')->toArray();
        $this->quantities = factory(\App\Type\Quantity::class, 2)->create()->pluck('id')->toArray();
    }

    public function testLoadMyResponses()
    {
        $this->createBeforeDemand();
        $anotherCompany = factory(\App\Company::class)->create();
        $this->attachCompanyToSphereAndRegion($this->company, [$this->spheres[0]], [$this->regions[0]]);
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $anotherCompany->id,
            'status' => \App\Type\DemandStatus::ACTIVE,
            'spheres' => [$this->spheres[0]],
            'regions' => [$this->regions[0]]
        ]);
        $this->createBeforeResponse();
        $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id
        ]);

        $this->createResponseWithItems(1, [
            'company_id' => $anotherCompany->id,
            'demand_id' => $demand->id
        ]);


        $service = new \App\Services\DemandService();

        $demands = Demand::get();
        $service->loadOnlyMyResponses($this->company, $demands);
        $this->assertCount(1, $demands);
        $this->assertCount(1, $demands[0]->responses);

        $demands = Demand::get();
        $this->assertCount(1, $demands);
        $this->assertCount(2, $demands[0]->responses);

    }

    public function testGetInputItems()
    {
        $this->createBeforeDemand();
        $anotherCompany = factory(\App\Company::class)->create();
        $this->attachCompanyToSphereAndRegion($this->company, [$this->spheres[0]], [$this->regions[0]]);
        $this->createDemandWithItems(1, [
            'company_id' => $anotherCompany->id,
            'status' => \App\Type\DemandStatus::ACTIVE,
            'spheres' => [$this->spheres[0]],
            'regions' => [$this->regions[0]]
        ]);
        $this->createDemandWithItems(1, [
            'company_id' => $anotherCompany->id,
            'status' => \App\Type\DemandStatus::ACTIVE,
            'spheres' => [$this->spheres[0]],
            'regions' => [$this->regions[1]]
        ]);
        $this->createDemandWithItems(1, [
            'company_id' => $anotherCompany->id,
            'status' => \App\Type\DemandStatus::ARCHIVED,
            'spheres' => [$this->spheres[0]],
            'regions' => [$this->regions[0]]
        ]);
        $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
            'status' => \App\Type\DemandStatus::ARCHIVED,
            'spheres' => [$this->spheres[0]],
            'regions' => [$this->regions[0]]
        ]);



        $service = new \App\Services\DemandService();

        $demands = $service->getInputItems($this->company);
        $this->assertCount(1, $demands);

    }

    public function testGetActiveItems()
    {
        //create my own active demands
        $this->createBeforeDemand();
        $this->createDemandWithItems(1, [
            'status' => \App\Type\DemandStatus::ACTIVE,
            'company_id' => $this->company->id
        ]);
        $this->createDemandWithItems(1, [
            'status' => \App\Type\DemandStatus::ACTIVE,
            'company_id' => $this->company->id
        ]);
        $this->createDemandWithItems(2, [
            'status' => \App\Type\DemandStatus::ACTIVE,
            'company_id' => $this->company->id
        ]);

        $this->createDemandWithItems(1, [
            'status' => \App\Type\DemandStatus::ARCHIVED,
            'company_id' => $this->company->id
        ]);
        $company = factory(\App\Company::class)->create();
        $this->createDemandWithItems(1, [
            'status' => \App\Type\DemandStatus::ACTIVE,
            'company_id' => $company->id
        ]);

        $service = new \App\Services\DemandService();

        $demands = $service->getActiveItems($this->company->id);
        $this->assertCount(3, $demands);

    }


}