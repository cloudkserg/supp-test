<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;
class UpdatesTest extends TestCase
{
    use DatabaseMigrations;


    private $spheres;

    private $regions;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();

        $this->spheres = factory(\App\Type\Sphere::class, 2)->create();
        $this->regions = factory(\App\Type\Region::class, 2)->create();

        $this->attachCompanyToSphereAndRegion($this->company,
            [$this->spheres[0]->id],
            [$this->regions[0]->id]
        );
        $this->createBeforeDemand();
    }





    public function testIndexAuth()
    {
        $this->get('/api/updates')
            ->assertStatus(401);
    }

    public function testIndexDemandForTimestampNull()
    {
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        //active
        $data = http_build_query([
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $r->assertJsonStructure([
            'demands', 'responses', 'timestamp'
        ]);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);
    }

    public function testIndexResponseForTimestampNull()
    {
        $company = factory(\App\Company::class)->create();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $company->id
        ]);
        $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id
        ]);

        //active
        $data = http_build_query([
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $r->assertJsonStructure([
            'demands', 'responses', 'timestamp'
        ]);
        $data = $r->json();

        $this->assertEquals(true, $data['responses']);
        $this->assertEquals(false, $data['demands']);
    }

    public function testIndexNullForTimestamp()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        $company = factory(\App\Company::class)->create();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $company->id
        ]);
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = $response->responseItems[0]->updated_at->timestamp;

        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(false, $data['demands']);
    }

    public function testIndexDemandForTimestamp()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        $updated_at = time();
        sleep(1);
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);

    }

    public function testIndexResponseForTimestamp()
    {
        $this->createBeforeDemand();
        $company = factory(\App\Company::class)->create();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $company->id,
        ]);
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = time();
        sleep(1);
        $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
        ]);
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $r->assertJsonStructure([
            'demands', 'responses'
        ]);
        $data = $r->json();

        $this->assertEquals(true, $data['responses']);
        $this->assertEquals(false, $data['demands']);

    }


    public function testIndexDemandItemsChanges()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        $updated_at = time();
        sleep(1);

        $demand->demandItems[0]->title = 'gdgdfgd';
        $demand->demandItems[0]->save();


        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);
    }


    public function testIndexDemandItemsAdd()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
        ]);

        $updated_at = time();
        sleep(1);

        $demand->demandItems()->save(
            factory(\App\Demand\DemandItem::class)->make()
        );

        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);
    }

    public function testIndexResponseItemsChanges()
    {
        $company = factory(\App\Company::class)->create();
        $this->createDemandWithItems(1, [
            'company_id' => $company->id
        ]);
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = time();
        sleep(1);

        $response->responseItems[0]->price = 50;
        $response->responseItems[0]->save();


        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(true, $data['responses']);
        $this->assertEquals(false, $data['demands']);
    }


    public function testIndexResponseItemsAdd()
    {
        $company = factory(\App\Company::class)->create();
        $this->createDemandWithItems(1, [
            'company_id' => $company->id
        ]);
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = time();
        sleep(1);

        $response->responseItems()->save(factory(\App\Demand\ResponseItem::class)->make());


        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(true, $data['responses']);
        $this->assertEquals(false, $data['demands']);
    }

    public function testIndexDemandResponseAdd()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = time();
        sleep(1);

        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'demand_id' => $demand->id,
            'company_id' => $company->id
        ]);

        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);
    }

    public function testIndexDemandInvoiceAdd()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id
        ]);

        $updated_at = time();
        sleep(1);

        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'demand_id' => $demand->id,
            'company_id' => $company->id
        ]);
        $invoice = factory(\App\Demand\Invoice::class)->create([
            'response_id' => $response->id
        ]);
        $response->responseItems[0]->invoice_id = $invoice->id;
        $response->responseItems[0]->save();

        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();

        $this->assertEquals(false, $data['responses']);
        $this->assertEquals(true, $data['demands']);
    }


    public function testIndexResponseInvoiceAdd()
    {
        $this->createBeforeDemand();
        $company = factory(\App\Company::class)->create();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $company->id
        ]);

        $response = $this->createResponseWithItems(1, [
            'demand_id' => $demand->id,
            'company_id' => $this->company->id
        ]);
        $updated_at = time();
        sleep(1);
        $invoice = factory(\App\Demand\Invoice::class)->create([
            'response_id' => $response->id,
        ]);
        $response->responseItems[0]->invoice_id = $invoice->id;
        $response->responseItems[0]->save();

        //active
        $data = http_build_query([
            'timestamp' => $updated_at,
            'token' => $this->token
        ]);
        $r = $this->get('/api/updates?' . $data);
        $r->assertStatus(200);
        $data = $r->json();


        $this->assertEquals(true, $data['responses']);
        $this->assertEquals(false, $data['demands']);
    }

}
