<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
class ResponseItemsTest extends TestCase
{
    use DatabaseMigrations;



    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();
        $this->createBeforeDemand();
        $this->createDemandWithItems(1);


    }


    public function testUpdateAuth()
    {
        $response = $this->createResponseWithItems(1);
        $responseItem = $response->responseItems[0];

        $this->patch('/api/responseItems/' . $responseItem->id)
            ->assertStatus(401);
    }


    public function testUpdate()
    {
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ], [
            'price' => 9
        ]);
        $responseItem = $response->responseItems[0];

        $data = [
            'price' => 100
        ];

        $r = $this->patch('/api/responseItems/' . $responseItem->id . '?token=' . $this->token,
            $data);
        $r->assertStatus(202);

        $newItem = \App\Demand\ResponseItem::find($responseItem->id);
        $this->assertEquals(100, $newItem->price);
    }


    public function testNotUpdateForeign()
    {
        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'company_id' => $company->id
        ], [
            'price' => 9
        ]);
        $responseItem = $response->responseItems[0];
        $data = [
            'price' => 100
        ];

        $r = $this->patch('/api/responseItems/' . $responseItem->id . '?token=' . $this->token,
            $data);
        $r->assertStatus(403);

        $newItem = \App\Demand\ResponseItem::find($responseItem->id);
        $this->assertEquals(9, $newItem->price);
    }


    public function testDeleteAuth()
    {
        $response = $this->createResponseWithItems(1);
        $responseItem = $response->responseItems[0];

        $this->delete('/api/responseItems/' . $responseItem->id)
            ->assertStatus(401);
    }


    public function testDelete()
    {
        $response = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id
        ]);
        $responseItem = $response->responseItems[0];

        $r = $this->delete('/api/responseItems/' . $responseItem->id . '?token=' . $this->token);
        $r->assertStatus(202);

        $newItem = \App\Demand\ResponseItem::find($responseItem->id);
        $this->assertTrue(!isset($newItem));
    }

    public function testNotDeleteForeign()
    {
        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'company_id' => $company->id
        ]);
        $responseItem = $response->responseItems[0];

        $r = $this->delete('/api/responseItems/' . $responseItem->id . '?token=' . $this->token);
        $r->assertStatus(403);

        $newItem = \App\Demand\ResponseItem::find($responseItem->id);
        $this->assertTrue(isset($newItem));
    }




}
