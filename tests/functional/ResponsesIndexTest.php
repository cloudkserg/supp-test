<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;
class ResponsesIndexTest extends TestCase
{
    use DatabaseMigrations;


    private $spheres;

    private $regions;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();

        $this->spheres = factory(\App\Type\Sphere::class, 2)->create();
        $this->regions = factory(\App\Type\Region::class, 2)->create();

        $this->attachCompanyToSphereAndRegion($this->company,
            [$this->spheres[0]->id],
            [$this->regions[0]->id]
        );
    }





    public function testIndexAuth()
    {
        $this->get('/api/responses')
            ->seeStatusCode(401);
    }

    public function testIndexActiveDraft()
    {
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        $responses['own_draft'] = $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id,
            'status' => \App\Type\ResponseStatus::DRAFT
        ]);

        $responses['own_active'] =  $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id,
            'status' => \App\Type\ResponseStatus::ACTIVE
        ]);

        $responses['own_cancel'] =  $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id,
            'status' => \App\Type\ResponseStatus::CANCEL
        ]);

        $responses['own_archived'] =  $this->createResponseWithItems(1, [
            'company_id' => $this->company->id,
            'demand_id' => $demand->id,
            'status' => \App\Type\ResponseStatus::ARCHIVED
        ]);

        //active
        $data = http_build_query([
            'status' => [
                \App\Type\ResponseStatus::ACTIVE,
                \App\Type\ResponseStatus::DRAFT
            ],
            'token' => $this->token
        ]);
        $r = $this->get('/api/responses?' . $data);
        $r->seeStatusCode('200');
        $r->seeJsonStructure($this->getJsonStructure());
        $data = json_decode($r->response->content());

        //only 3
        $this->assertCount(2, $data);

        //first - my draft
        $this->assertEquals($this->company->id, $data[0]->company->id);

        //second - my active
        $this->assertEquals($this->company->id, $data[1]->company->id);
    }






    private function getJsonStructure()
    {
        return [
            '*' => [
                'id',
                'status',
                'delivery_type',
                'company' => [
                    'id',
                    'title'
                ],
                'responseItems' => [
                    '*' => [
                        'id',
                        'price',
                        'status',
                        'demand_item_id',
                    ]
                ],
                'demand' => [
                    'id',
                    'title',
                    'status',
                    'demandItems' => [
                        '*' => [
                            'id',
                            'title',
                            'status',
                            'quantityTitle',
                            'count'
                        ]
                    ]
                ]
            ]
        ];
    }




}
