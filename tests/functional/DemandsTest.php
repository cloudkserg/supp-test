<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;
class DemandsTest extends TestCase
{
    use DatabaseMigrations;

    private $regions;

    private $spheres;

    private $quantities;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();
        $this->regions = factory(\App\Type\Region::class, 3)->create()->pluck('id')->toArray();
        $this->spheres = factory(\App\Type\Sphere::class, 3)->create()->pluck('id')->toArray();
        $this->quantities = factory(\App\Type\Quantity::class, 2)->create()->pluck('id')->toArray();
    }


    public function testDeleteAuth()
    {
        $this->delete('/api/demands/1')
            ->assertStatus(401);
    }


    public function testDelete()
    {
        $demand = factory(Demand::class)->create();

        $r = $this->delete('/api/demands/' . $demand->id . '?token=' . $this->token)
            ->assertStatus(202);

        $this->assertEquals(\App\Type\DemandStatus::DELETED, Demand::find($demand->id)->status);
    }



    public function testCreateAuth()
    {
        $this->post('/api/demands')
            ->assertStatus(401);
    }

    public function testCreate()
    {
        $faker = Faker\Factory::create();

        $data = [
            'title' => $faker->title,
            'desc' => $faker->text,
            'deliveryDate' => $faker->date('d.m.Y H:i'),
            'additionEmails' => [
                $faker->safeEmail,
                $faker->safeEmail
            ],
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantityId' => $faker->randomElement($this->quantities)
                ],
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantityId' => $faker->randomElement($this->quantities)
                ],
            ]
        ];

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForDemandJob::class);
        $r = $this->post('/api/demands?token=' . $this->token, $data);
            $r->assertStatus(201)
            ->assertHeader('location', '/demands/1');


        $demand = Demand::find(1);
        $this->assertEquals($data['title'], $demand->title);
        $this->assertEquals($data['desc'], $demand->desc);
        $this->assertCount(2, $demand->addition_emails);
        $this->assertCount(1, $demand->regions);
        $this->assertCount(1, $demand->spheres);
        $this->assertCount(2, $demand->demandItems);

    }

    private function createCompany()
    {
        $company = new \App\Company();
        $company->title = 'abba';
        $company->save();

        return $company;
    }



    public function testMiniCreate()
    {
        $faker = Faker\Factory::create();

        $data = [
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantityId' => $faker->randomElement($this->quantities)
                ],
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantityId' => $faker->randomElement($this->quantities)
                ],
            ]
        ];

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForDemandJob::class);
        $r = $this->post('/api/demands?token=' . $this->token, $data);
        $r->assertStatus(201)
            ->assertHeader('location', '/demands/1');
    }

    public function testCreateErrorWithoutDemandItems()
    {
        $faker = Faker\Factory::create();

        $data = [
            'title' => $faker->title,
            'desc' => $faker->text,
            'deliveryDate' => $faker->date('d.m.Y H:i'),
            'additionEmails' => [
                $faker->safeEmail,
                $faker->safeEmail
            ],
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
        ];

        $this->post('/api/demands?token=' . $this->token, $data)
            ->assertStatus(422);
    }

    private function checkDemandStatus($demandId, $demandStatus)
    {
        $updateDemand = Demand::find($demandId);
        $this->assertEquals($demandStatus, $updateDemand->status);
    }


    private function createDemandForStatus(
            \App\Company $company, $status,
            $countDemandItems = 1, $regions = null, $spheres = null
    ) {
        $this->createBeforeDemand();
        return $this->createDemandWithItems($countDemandItems,[
            'status' => $status,
            'company_id' => $company->id,
            'spheres' => isset($spheres) ? $spheres : $this->spheres,
            'regions' => isset($regions) ? $regions : $this->regions,
        ]);
    }



    public function testActiveFromDraft()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DRAFT, 1
        );

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForDemandJob::class);
        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(202);
        $this->checkDemandStatus($demand->id, \App\Type\DemandStatus::ACTIVE);
    }

    public function testActiveFromCancel()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::CANCEL, 1
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
        $this->checkDemandStatus($demand->id, \App\Type\DemandStatus::CANCEL);
    }



    public function testActiveNotAuth()
    {
        $this->post('/api/demands/active')
            ->assertStatus(401);
    }

    public function testActiveNotOwnDemand()
    {
        $demand = $this->createDemandForStatus(
            factory(\App\Company::class)->create(), \App\Type\DemandStatus::DRAFT, 1
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }

    public function testActiveNotHasDemandItems()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DRAFT, 0
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }

    public function testActiveNotHasSpheres()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DRAFT, 0, null, []
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }


    public function testActiveNotHasRegions()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DRAFT, 0, [], null
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }

    public function testActiveFromDone()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DONE, 1
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }

    public function testActiveFromDeleted()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DELETED, 1
        );

        $this->post(sprintf('api/demands/active?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }




    public function testCancelFromDraft()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DRAFT, 1
        );

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForCompanyJob::class);
        $this->post(sprintf('api/demands/cancel?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(202);
        $this->checkDemandStatus($demand->id, \App\Type\DemandStatus::CANCEL);
    }

    public function testCancelFromActive()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::ACTIVE, 1
        );

        $this->post(sprintf('api/demands/cancel?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
        $this->checkDemandStatus($demand->id, \App\Type\DemandStatus::CANCEL);
    }



    public function testCancelNotAuth()
    {
        $this->post('/api/demands/cancel')
            ->assertStatus(401);
    }

    public function testCancelNotOwnDemand()
    {
        $demand = $this->createDemandForStatus(
            factory(\App\Company::class)->create(), \App\Type\DemandStatus::DRAFT, 1
        );

        $this->post(sprintf('api/demands/cancel?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }

    public function testCancelFromDone()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DONE, 1
        );

        $this->post(sprintf('api/demands/cancel?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }




    public function testCancelFromDeleted()
    {
        $demand = $this->createDemandForStatus(
            $this->company, \App\Type\DemandStatus::DELETED, 1
        );

        $this->post(sprintf('api/demands/cancel?token=%s', $this->token), ['id' => $demand->id])
            ->assertStatus(403);
    }


}
