<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;
class DemandsTest extends TestCase
{
    use DatabaseMigrations;

    private $regions;

    private $spheres;

    private $quantities;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();
        $this->regions = factory(\App\Type\Region::class, 3)->create()->pluck('id')->toArray();
        $this->spheres = factory(\App\Type\Sphere::class, 3)->create()->pluck('id')->toArray();
        $this->quantities = factory(\App\Type\Quantity::class, 2)->create()->pluck('id')->toArray();
    }


    public function testCreateAuth()
    {
        $this->post('/api/demands')
            ->seeStatusCode(401);
    }

    public function testCreate()
    {
        $faker = Faker\Factory::create();

        $data = [
            'title' => $faker->title,
            'desc' => $faker->text,
            'delivery_date' => $faker->date('d.m.Y H:i'),
            'addition_emails' => [
                $faker->safeEmail,
                $faker->safeEmail
            ],
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ],
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ],
            ]
        ];

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForDemandJob::class);
        $r = $this->post('/api/demands?token=' . $this->token, $data);
            $r->seeStatusCode(201)
            ->seeHeader('location', '/demands/1');
    }

    public function testMiniCreate()
    {
        $faker = Faker\Factory::create();

        $data = [
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ],
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ],
            ]
        ];

        $this->expectsJobs(\App\Jobs\CreateDraftResponseForDemandJob::class);
        $r = $this->post('/api/demands?token=' . $this->token, $data);
        $r->seeStatusCode(201)
            ->seeHeader('location', '/demands/1');
    }

    public function testCreateErrorWithoutDemandItems()
    {
        $faker = Faker\Factory::create();

        $data = [
            'title' => $faker->title,
            'desc' => $faker->text,
            'delivery_date' => $faker->date('d.m.Y H:i'),
            'addition_emails' => [
                $faker->safeEmail,
                $faker->safeEmail
            ],
            'regions' => $faker->randomElements($this->regions),
            'spheres' => $faker->randomElements($this->spheres),
        ];

        $this->post('/api/demands?token=' . $this->token, $data)
            ->seeStatusCode(422);
    }


    public function testUpdateArchived()
    {
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
            'status' => \App\Type\DemandStatus::ACTIVE
        ]);

        $data = [
            'status' => \App\Type\DemandStatus::ARCHIVED
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demand->id, $this->token), $data);
            $r->seeStatusCode(202);

        $this->assertEquals(\App\Type\DemandStatus::ARCHIVED, Demand::find($demand->id)->status);
    }

    public function testUpdateActive()
    {
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
            'status' => \App\Type\DemandStatus::ARCHIVED
        ]);

        $data = [
            'status' => \App\Type\DemandStatus::ACTIVE
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demand->id, $this->token), $data);
        $r->seeStatusCode(202);

        $this->assertEquals(\App\Type\DemandStatus::ACTIVE, Demand::find($demand->id)->status);
    }

    public function testUpdateNotExist()
    {
        $demandId = 567;
        $data = [
            'status' => \App\Type\DemandStatus::ACTIVE
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demandId, $this->token), $data);
        $r->seeStatusCode(404);
    }

    public function testUpdateSame()
    {
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $this->company->id,
            'status' => \App\Type\DemandStatus::ACTIVE
        ]);

        $data = [
            'status' => \App\Type\DemandStatus::ACTIVE
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demand->id, $this->token), $data);
        $r->seeStatusCode(202);

        $this->assertEquals(\App\Type\DemandStatus::ACTIVE, Demand::find($demand->id)->status);
    }

    public function testNotRightUpdate()
    {
        $company = factory(\App\Company::class)->create();
        $demand = $this->createDemandWithItems(1, [
            'company_id' => $company->id,
            'status' => \App\Type\DemandStatus::ACTIVE
        ]);

        $data = [
            'status' => \App\Type\DemandStatus::ARCHIVED
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demand->id, $this->token), $data);
        $r->seeStatusCode(403);

        $this->assertEquals(\App\Type\DemandStatus::ACTIVE, Demand::find($demand->id)->status);
    }





}
