<?php
/**
 * Created by PhpStorm.
 * User: kirya
 * Date: 29.07.17
 * Time: 14:20
 */

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Demand;
class DemandsAutoNumberTest extends TestCase
{
    use DatabaseMigrations;

    private $regions;

    private $spheres;

    private $quantities;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();
        $this->regions = factory(\App\Type\Region::class, 3)->create()->pluck('id')->toArray();
        $this->spheres = factory(\App\Type\Sphere::class, 3)->create()->pluck('id')->toArray();
        $this->quantities = factory(\App\Type\Quantity::class, 2)->create()->pluck('id')->toArray();
    }

    public function testCreateDemandFieldNumberAutoText()
    {
        $faker = Faker\Factory::create();

        $this->createDemandWithItems(1, [
            'number' => 'number2',
            'company_id' => $this->company->id
        ]);

        $data = [
            'title' => $faker->title,
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ]
            ]
        ];

        $r = $this->post('/api/demands?token=' . $this->token, $data);
        $r->assertStatus(201);

        $demand = Demand::find(2);
        $this->assertEquals($data['title'], $demand->title);
        $this->assertEquals(3, $demand->number);
    }

    public function testCreateDemandFieldNumberAutoNext()
    {
        $faker = Faker\Factory::create();

        $company = factory(\App\Company::class)->create();
        $this->createDemandWithItems(1, [
            'number' => 10,
            'company_id' => $company->id
        ]);

        $this->createDemandWithItems(1, [
            'number' => 2,
            'company_id' => $this->company->id
        ]);


        $data = [
            'title' => $faker->title,
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ]
            ]
        ];

        $r = $this->post('/api/demands?token=' . $this->token, $data);
        $r->assertStatus(201);

        $demand = Demand::find(3);
        $this->assertEquals($data['title'], $demand->title);
        $this->assertEquals(3, $demand->number);
    }



    public function testCreateDemandFieldNumberAutoOne()
    {
        $faker = Faker\Factory::create();

        $data = [
            'title' => $faker->title,
            'demandItems' => [
                [
                    'title' => $faker->title,
                    'count' => $faker->randomFloat(),
                    'quantity_id' => $faker->randomElement($this->quantities)
                ]
            ]
        ];

        $r = $this->post('/api/demands?token=' . $this->token, $data);
        $r->assertStatus(201)
            ->assertHeader('location', '/demands/1');



        $demand = Demand::find(1);
        $this->assertEquals($data['title'], $demand->title);
        $this->assertEquals(1, $demand->number);
    }


    public function testChangeDemandFieldNumberAutoNext()
    {
        $faker = Faker\Factory::create();

        $demand = $this->createDemandWithItems(1, [
            'number' => 2,
            'company_id' => $this->company->id
        ]);

        $data = [
            'number' => 'silicium',
            'status' => \App\Type\DemandStatus::ACTIVE
        ];
        $r = $this->patch(sprintf('/api/demands/%s?token=%s', $demand->id, $this->token), $data);
        $r->assertStatus(202);

        $this->assertEquals($data['number'], Demand::find($demand->id)->number);
    }

}
