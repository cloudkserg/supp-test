<?php

use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Demand\Response;
class ResponsesTest extends TestCase
{
    use DatabaseMigrations;


    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setAuthToken();
    }

    public function testUpdateAuth()
    {
        $this->patch('/api/responses/1')
            ->assertStatus(401);
    }

    public function testUpdate()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $response = $this->createResponseWithItems(0, [
            'company_id' => $this->company->id,
            'status' => \App\Type\ResponseStatus::CANCEL,
            'demand_id' => $demand->id
        ]);

        $data = [
            'deliveryType' => 'sfsdfsd',
            'responseItems' => [
                [
                    'demandItemId' => 1,
                    'price' => 23
                ], [
                    'demandItemId' => 1,
                    'price' => 23
                ]
            ]
        ];

        $r = $this->patch(sprintf('/api/responses/%s?token=%s', $response->id, $this->token), $data);
            $r->assertStatus(202);

        $responses = Response::all();
        $this->assertCount(1, $responses);

        $response = $responses[0];
        $this->assertEquals(\App\Type\ResponseStatus::ACTIVE, $response->status);
        $this->assertEquals($this->company->id, $response->company_id);
        $this->assertCount(2, $response->responseItems);
    }



    public function testUpdateChange()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $response = $this->createResponseWithItems(2, [
            'company_id' => $this->company->id,
            'status' => \App\Type\ResponseStatus::ACTIVE,
            'demand_id' => $demand->id
        ]);

        $data = [
            'deliveryType' => 'sfsdfsd',
            'number' => '56',
            'desc' => 'abba',
            'responseItems' => [
                [
                    'demandItemId' => 1,
                    'price' => 23
                ], [
                    'demandItemId' => 1,
                    'price' => 23
                ]
            ]
        ];

        $r = $this->patch(sprintf('/api/responses/%s?token=%s', $response->id, $this->token), $data);
        $r->assertStatus(202);

        $responses = Response::all();
        $this->assertCount(1, $responses);

        $response = $responses[0];
        $this->assertEquals(\App\Type\ResponseStatus::ACTIVE, $response->status);
        $this->assertEquals($this->company->id, $response->company_id);

        $this->assertEquals($data['deliveryType'], $response->deliveryType);
        $this->assertEquals($data['number'], $response->deliveryType);
        $this->assertEquals($data['desc'], $response->desc);

        $this->assertCount(2, $response->responseItems);

        $this->assertEquals($data['responseItems'][0]['demandItemId'], $response->responseItems[0]->demand_item_id);
        $this->assertEquals($data['responseItems'][0]['price'], $response->responseItems[0]->price);

        $this->assertEquals($data['responseItems'][1]['demandItemId'], $response->responseItems[1]->demand_item_id);
        $this->assertEquals($data['responseItems'][1]['price'], $response->responseItems[1]->price);
    }

    public function testUpdateNotActiveResponseItems()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'status' => \App\Type\ResponseStatus::DONE,
            'company_id' => $company->id,
            'demand_id' => $demand->id
        ]);

        $data = [
            'status' => \App\Type\ResponseStatus::DONE,
            'deliveryType' => 'sfsdfsd',
            'responseItems' => [
                [
                    'demandItemId' => 1,
                    'price' => 23
                ], [
                    'demandItemId' => 1,
                    'price' => 23
                ]
            ]
        ];

        $r = $this->patch(sprintf('/api/responses/%s?token=%s', $response->id, $this->token), $data);
        $r->assertStatus(403);
    }

    public function testUpdateNotForeign()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $company = factory(\App\Company::class)->create();
        $response = $this->createResponseWithItems(1, [
            'company_id' => $company->id,
            'demand_id' => $demand->id
        ]);

        $data = [
            'deliveryType' => 'sfsdfsd',
            'responseItems' => [
                [
                    'demandItemId' => 1,
                    'price' => 23
                ], [
                    'demandItemId' => 1,
                    'price' => 23
                ]
            ]
        ];

        $r = $this->patch(sprintf('/api/responses/%s?token=%s', $response->id, $this->token), $data);
        $r->assertStatus(403);
    }



    public function testUpdateReadedAuth()
    {
        $this->post('/api/responses/1/readed')
            ->assertStatus(401);
    }

    public function testUpdateReaded()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $response = $this->createResponseWithItems(0, [
            'company_id' => $this->company->id,
            'status' => \App\Type\ResponseStatus::CANCEL,
            'demand_id' => $demand->id
        ]);

        $date = \Carbon\Carbon::create();
        $data = ['readed' => $date->format('d.m.Y H:i:s')];

        $r = $this->post(sprintf('/api/responses/%s/readed?token=%s', $response->id, $this->token), $data);
            $r->assertStatus(202);

        $responses = Response::all();
        $this->assertCount(1, $responses);

        $response = $responses[0];
        /***
         * @var Response $response
         */
        $this->assertEquals(\App\Type\ResponseStatus::CANCEL, $response->status);
        $this->assertEquals($this->company->id, $response->company_id);
        $this->assertTrue($response->readed_time->equalTo($date));
    }


    public function testUpdateReadedWithoudData()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $response = $this->createResponseWithItems(0, [
            'company_id' => $this->company->id,
            'status' => \App\Type\ResponseStatus::CANCEL,
            'demand_id' => $demand->id
        ]);

        $r = $this->post(sprintf('/api/responses/%s/readed?token=%s', $response->id, $this->token));
        $r->assertStatus(422);
    }

    public function testUpdateReadedWrongData()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $response = $this->createResponseWithItems(0, [
            'company_id' => $this->company->id,
            'status' => \App\Type\ResponseStatus::CANCEL,
            'demand_id' => $demand->id
        ]);

        $data = ['readed' => '20178989'];
        $r = $this->post(sprintf('/api/responses/%s/readed?token=%s', $response->id, $this->token), $data);
        $r->assertStatus(422);
    }

    public function testUpdateReadedNotMyResponse()
    {
        //createDemand
        $this->createBeforeDemand();
        $demand = $this->createDemandWithItems(1);

        //createResponse
        $anotherCompany = new \App\Company();
        $anotherCompany->title = 'abba';
        $anotherCompany->save();

        $response = $this->createResponseWithItems(0, [
            'company_id' => $anotherCompany->id,
            'status' => \App\Type\ResponseStatus::CANCEL,
            'demand_id' => $demand->id
        ]);

        $date = \Carbon\Carbon::create();
        $data = ['readed' => $date->format('d.m.Y H:i:s')];

        $r = $this->post(sprintf('/api/responses/%s/readed?token=%s', $response->id, $this->token), $data);
        $r->assertStatus(403);
    }



}
