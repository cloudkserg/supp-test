<?php
/**
 * Created by PhpStorm.
 * User: kirya
 * Date: 04.10.16
 * Time: 22:42
 */

use Illuminate\Support\Facades\Event;
use App\Events\Invoice\CreateInvoiceEvent;
use App\Events\Invoice\DeleteInvoiceEvent;
use App\Events\Invoice\ResponsedInvoiceEvent;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class GenerateInvoiceEventsTest extends \TestCase
{
    use DatabaseMigrations;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createBeforeCompany();
        factory(\App\Company::class)->create();
        $this->createBeforeDemand();
        $this->createDemandWithItems(1);
        $this->createResponseWithItems(1);
    }



    public function testCreated()
    {
        Event::fake();
        factory(\App\Demand\Invoice::class)->create();

        Event::assertNotFired(CreateInvoiceEvent::class);
        Event::assertNotFired(DeleteInvoiceEvent::class);
        Event::assertNotFired(ResponsedInvoiceEvent::class);

        $response = $this->createResponseWithItems(1);

        $invoice = (new \App\Services\InvoiceService())
            ->createItem($response->id, $response->responseItems);

        Event::assertFired(CreateInvoiceEvent::class, function ($e) use ($invoice) {
            return (
                $e->item->id == $invoice->id and
                count($e->item->responseItems) == 1
            );
        });
        Event::assertNotFired(DeleteInvoiceEvent::class);
        Event::assertNotFired(ResponsedInvoiceEvent::class);
    }

    public function testDeleted()
    {
        Event::fake();
        $invoice = factory(\App\Demand\Invoice::class)->create();

        Event::fake();
        $invoice->delete();

        Event::assertFired(DeleteInvoiceEvent::class, function ($e) use ($invoice) {
            return (
                $e->item->id == $invoice->id
            );
        });

        Event::assertNotFired(CreateInvoiceEvent::class);
        Event::assertNotFired(ResponsedInvoiceEvent::class);
    }

    public function testResponsed()
    {
        Event::fake();
        $invoice = factory(\App\Demand\Invoice::class)->create();

        Event::fake();
        $invoice->status = \App\Type\InvoiceStatus::RESPONSED;
        $invoice->save();

        Event::assertFired(ResponsedInvoiceEvent::class, function ($e) use ($invoice) {
            return (
                $e->item->id == $invoice->id
            );
        });

    }

    public function testNotResponsed()
    {
        Event::fake();
        $invoice = factory(\App\Demand\Invoice::class)->create();

        Event::fake();
        $invoice->status = \App\Type\InvoiceStatus::REQUESTED;
        $invoice->save();

        Event::assertNotFired(ResponsedInvoiceEvent::class);
    }

}