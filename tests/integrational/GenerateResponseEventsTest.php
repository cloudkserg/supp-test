<?php
/**
 * Created by PhpStorm.
 * User: kirya
 * Date: 04.10.16
 * Time: 22:42
 */

use Illuminate\Support\Facades\Event;
use App\Events\Response\CreateResponseEvent;
use App\Events\Response\ChangeResponseEvent;
use App\Events\Response\CancelResponseEvent;
use App\Events\Response\ActiveResponseEvent;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class GenerateResponseEventsTest extends \TestCase
{
    use DatabaseMigrations;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createBeforeCompany();
        factory(\App\Company::class)->create();
        $this->createBeforeDemand();
        $this->createDemandWithItems(1);
    }



    public function testCreated()
    {
        Event::fake();
        $response = $this->createResponseWithItems(1);

        Event::assertFired(CreateResponseEvent::class, function ($e) use ($response) {
            return $e->item->id == $response->id;
        });
    }

    public function testUpdatedOnlyData()
    {
        Event::fake();
        $oldDeliveryType = 'sss';
        $response = $this->createResponseWithItems(1, [
            'delivery_type' => $oldDeliveryType
        ]);

        Event::fake();
        $response->delivery_type = 'sfsfsdf';
        $response->save();

        Event::assertFired(ChangeResponseEvent::class, function ($e) use ($response, $oldDeliveryType) {
            return (
                $e->item->id == $response->id and
                $e->oldDeliveryType == $oldDeliveryType
            );
        });

        Event::assertNotFired(ActiveResponseEvent::class);
        Event::assertNotFired(CancelResponseEvent::class);
        Event::assertNotFired(CreateResponseEvent::class);
    }

    public function testUpdatedArchived()
    {
        Event::fake();
        $response = $this->createResponseWithItems(1, [
            'status' => \App\Type\ResponseStatus::ACTIVE
        ]);

        $response->status = \App\Type\ResponseStatus::ARCHIVED;
        $response->save();

        Event::assertFired(CancelResponseEvent::class, function ($e) use ($response) {
            return $e->item->id == $response->id;
        });
    }

    public function testUpdatedCancelNotActive()
    {
        Event::fake();
        $response = $this->createResponseWithItems(1, [
            'status' => \App\Type\ResponseStatus::DRAFT
        ]);

        $response->status = \App\Type\ResponseStatus::CANCEL;
        $response->save();

        Event::assertNotFired(CancelResponseEvent::class);
    }

    public function testUpdatedActive()
    {
        Event::fake();
        $response = $this->createResponseWithItems(1, [
            'status' => \App\Type\ResponseStatus::DRAFT
        ]);

        $response->status = \App\Type\ResponseStatus::ACTIVE;
        $response->save();

        Event::assertFired(ActiveResponseEvent::class, function ($e) use ($response) {
            return $e->item->id == $response->id;
        });
    }

    public function testUpdatedCancel()
    {
        Event::fake();
        $response = $this->createResponseWithItems(1, [
            'status' => \App\Type\ResponseStatus::ACTIVE
        ]);

        $response->status = \App\Type\ResponseStatus::CANCEL;
        $response->save();

        Event::assertFired(CancelResponseEvent::class, function ($e) use ($response) {
            return $e->item->id == $response->id;
        });
    }

    public function testUpdateStatusAndData()
    {
        Event::fake();
        $oldDeliveryType = 'sss';
        $response = $this->createResponseWithItems(1, [
            'delivery_type' => $oldDeliveryType,
            'status' => \App\Type\ResponseStatus::DRAFT
        ]);

        $response->delivery_type = 'sfsfsdf';
        $response->status = \App\Type\ResponseStatus::ACTIVE;
        $response->save();

        Event::assertFired(ChangeResponseEvent::class, function ($e) use ($response, $oldDeliveryType) {
            return (
                $e->item->id == $response->id and
                $e->oldDeliveryType == $oldDeliveryType
            );
        });

        Event::assertFired(ActiveResponseEvent::class, function ($e) use ($response) {
            return $e->item->id == $response->id;
        });
    }
}