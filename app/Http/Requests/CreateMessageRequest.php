<?php
/**
 * Created by PhpStorm.
 * User: kirya
 * Date: 13.09.16
 * Time: 16:24
 */

namespace App\Http\Requests;


use App\Http\Requests\ApiRequest;
use App\Services\DemandService;
use App\Demand\Demand;
use Carbon\Carbon;
use Swagger\Annotations as SWG;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;


/**
 *
 * @SWG\Definition(
 *      definition="CreateMessageRequest",
 *      @SWG\Property(
 *         property="text",
 *         description="text",
 *         type="string",
 *      ),
 *      @SWG\Property(
 *         property="toCompanyId",
 *         description="to company id",
 *         type="integer",
 *      ),
 *      @SWG\Property(
 *         property="demandId",
 *         description="demand",
 *         type="integer",
 *      ),
 *  )
 * Class CreateMessageRequest
 * @package App\Http\Requests
 */
class CreateMessageRequest extends ApiRequest
{
    /**
     * @var Demand
     */
    private $item;

    /**
     * @var DemandService
     */
    private $demandService;

    public function __construct(array $query = array(), array $request = array(), array $attributes = array(), array $cookies = array(), array $files = array(), array $server = array(), $content = null)
    {
        $this->demandService = new DemandService();
        parent::__construct($query, $request, $attributes, $cookies, $files, $server, $content); // TODO: Change the autogenerated stub
    }

    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return $this->user()->can('message', $this->getDemand());
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'text' => 'string|required',
            'toCompanyId' => 'integer|required',
            'demandId' => 'integer|required'
        ];
    }

    /**
     * @return Demand
     */
    public function getDemand()
    {
        if (!isset($this->item)) {
            $this->item = $this->demandService->findItem((int)$this->get('demandId'));
            if (!isset($this->item)) {
                throw new NotFoundHttpException('Not found item');
            }
        }
        return $this->item;
    }




}

